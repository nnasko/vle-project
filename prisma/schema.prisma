// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
  AUTHORIZED
}

enum GradeLevel {
  FIRST_YEAR
  SECOND_YEAR
}

enum CourseDuration {
  FULL_TIME
  PART_TIME
}

enum ModuleStatus {
  ACTIVE
  REVIEW
  ARCHIVED
}

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  name              String
  password          String?         // Hashed password
  role              UserRole
  avatar            String?
  phone             String?
  joinDate          DateTime       @default(now())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  isActive          Boolean        @default(true)
  
  // Role-specific relations
  studentProfile    Student?
  teacherProfile    Teacher?
  adminProfile      Admin?
  
  // Common relations
  notifications     Notification[]
  messages         Message[]       @relation("MessageSender")
  receivedMessages Message[]       @relation("MessageReceiver")
}

model EnrollmentTrend {
  id            String      @id @default(cuid())
  department    Department  @relation(fields: [departmentId], references: [id])
  departmentId  String
  month         DateTime
  studentCount  Int
}

model AttendanceRate {
  id            String      @id @default(cuid())
  department    Department  @relation(fields: [departmentId], references: [id])
  departmentId  String
  week          DateTime
  rate          Float
}

model StudentLog {
  id          String    @id @default(cuid())
  type        String    // POSITIVE, NEGATIVE, BEHAVIOUR, etc.
  title       String
  description String
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  teacherId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Student {
  id                String         @id @default(cuid())
  user              User           @relation(fields: [userId], references: [id])
  userId            String         @unique
  studentId         String         @unique
  cohort            Cohort?        @relation(fields: [cohortId], references: [id])
  cohortId          String?
  expectedGraduation DateTime
  currentGrade      GradeLevel
  overallGrade      Float?         // Overall academic performance
  attendance        Attendance[]   // Attendance records
  assignments       Assignment[]   // Assignments submitted
  grades           Grade[]        // Individual grades
  logs             StudentLog[]   // Student activity logs
  
  // Additional fields for student profile
  courseProgress    Float?         @default(0)      // Progress in current course (0-100)
  enrollmentDate    DateTime       @default(now())  // When student enrolled
  academicStanding  String?        // e.g., "Good Standing", "Probation"
  specialNeeds      String?        // Any special requirements or accommodations
  notes            String?        // Additional notes about the student
  emergencyContact  String?        // Emergency contact information
  previousEducation String?        // Previous educational background
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?       @updatedAt
}

model Teacher {
  id               String         @id @default(cuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @unique
  employeeId       String         @unique
  position         String         // Added from UI: e.g., "Senior Lecturer"
  specializations  String[]
  biography        String?        // Added for teacher profile
  officeHours     String?        // Added for teacher availability
  qualifications  String[]       // Added for academic qualifications
  
  // Relations
  department       Department     @relation(fields: [departmentId], references: [id])
  departmentId     String
  teachingModules  TeacherModule[]
  cohorts          Cohort[]
  lessons          Lesson[]
  logs             StudentLog[]
}

model Admin {
  id               String         @id @default(cuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String         @unique
  employeeId       String         @unique
  department       Department     @relation(fields: [departmentId], references: [id])
  departmentId     String
  role             String
  responsibilities String[]
}

model ModulePrerequisite {
  id            String   @id @default(cuid())
  module        Module   @relation("ModuleToPrerequisite", fields: [moduleId], references: [id])
  moduleId      String
  prerequisite  Module   @relation("PrerequisiteToModule", fields: [prerequisiteId], references: [id])
  prerequisiteId String

  @@unique([moduleId, prerequisiteId])
}

model LearningOutcome {
  id          String   @id @default(cuid())
  description String
  module      Module   @relation(fields: [moduleId], references: [id])
  moduleId    String
}

model Assessment {
  id          String   @id @default(cuid())
  type        String
  weight      Float
  description String
  module      Module   @relation(fields: [moduleId], references: [id])
  moduleId    String
}

model Topic {
  id          String   @id @default(cuid())
  name        String
  module      Module   @relation(fields: [moduleId], references: [id])
  moduleId    String
}

model Department {
  id               String         @id @default(cuid())
  name             String         @unique
  description      String?
  headOfDepartment String
  teachers         Teacher[]
  admins           Admin[]
  courses          Course[]
  staffCount       Int           @default(0)  // Added from UI
  studentCount     Int           @default(0)  // Added from UI
  status           String        @default("active") // Added from UI
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isActive         Boolean        @default(true)

  // Added from UI
  enrollmentTrends EnrollmentTrend[]
  attendanceRates  AttendanceRate[]
}

model Course {
  id               String         @id @default(cuid())
  name             String
  code             String         @unique
  description      String?
  department       Department     @relation(fields: [departmentId], references: [id])
  departmentId     String
  duration         CourseDuration
  cohorts          Cohort[]
  modules          Module[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isActive         Boolean        @default(true)
}

model Module {
  id               String         @id @default(cuid())
  name             String
  code             String
  description      String?
  year             Int           // Added from UI
  credits          Int           // Added from UI
  passingRate      Float?        // Added from UI
  averageScore     Float?        // Added from UI
  status           ModuleStatus  @default(ACTIVE)
  prerequisites    ModulePrerequisite[] @relation("ModuleToPrerequisite")
  prerequisiteFor  ModulePrerequisite[] @relation("PrerequisiteToModule")
  
  // Relations
  course           Course         @relation(fields: [courseId], references: [id])
  courseId         String
  teachers         TeacherModule[]
  lessons          Lesson[]
  
  // Added from UI
  learningOutcomes LearningOutcome[]
  assessments      Assessment[]
  topics           Topic[]

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model TeacherModule {
  id          String   @id @default(cuid())
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  teacherId   String
  module      Module   @relation(fields: [moduleId], references: [id])
  moduleId    String
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean  @default(true)

  @@unique([teacherId, moduleId])
}

model Cohort {
  id               String         @id @default(cuid())
  name             String
  course           Course         @relation(fields: [courseId], references: [id])
  courseId         String
  teacher          Teacher        @relation(fields: [teacherId], references: [id])
  teacherId        String
  startDate        DateTime
  endDate          DateTime
  students         Student[]
  lessons          Lesson[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isActive         Boolean        @default(true)
}

model Lesson {
  id               String         @id @default(cuid())
  topic            String
  description      String?
  module           Module         @relation(fields: [moduleId], references: [id])
  moduleId         String
  cohort           Cohort         @relation(fields: [cohortId], references: [id])
  cohortId         String
  teacher          Teacher        @relation(fields: [teacherId], references: [id])
  teacherId        String
  date             DateTime
  startTime        DateTime
  endTime          DateTime
  room             String
  materials        String[]
  attendance       Attendance[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Attendance {
  id               String           @id @default(cuid())
  lesson           Lesson           @relation(fields: [lessonId], references: [id])
  lessonId         String
  student          Student          @relation(fields: [studentId], references: [id])
  studentId        String
  status           AttendanceStatus
  minutesLate      Int?
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([lessonId, studentId])
}

model Assignment {
  id               String         @id @default(cuid())
  title            String
  description      String
  dueDate          DateTime
  student          Student        @relation(fields: [studentId], references: [id])
  studentId        String
  submissionDate   DateTime?
  grade            Float?
  feedback         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Grade {
  id               String         @id @default(cuid())
  student          Student        @relation(fields: [studentId], references: [id])
  studentId        String
  title            String
  score            Float
  maxScore         Float
  weight           Float
  feedback         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Notification {
  id               String         @id @default(cuid())
  user             User           @relation(fields: [userId], references: [id])
  userId           String
  title            String
  message          String
  type             String        // academic, message, assignment, grade, alert
  read             Boolean        @default(false)
  link             String?
  createdAt        DateTime       @default(now())
}

model Message {
  id               String         @id @default(cuid())
  sender           User           @relation("MessageSender", fields: [senderId], references: [id])
  senderId         String
  receiver         User           @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId       String
  subject          String
  content          String
  read             Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}